#line 2
DEFINE_DCTL_ALPHA_MODE_STRAIGHT
// clang-format off

DEFINE_UI_PARAMS(protected_radius_x, Protected Radius X, DCTLUI_SLIDER_FLOAT, 0.5, 0.001, 1.5, 0.01)
DEFINE_UI_PARAMS(protected_radius_y, Protected Radius Y, DCTLUI_SLIDER_FLOAT, 0.5, 0.001, 1.5, 0.01)
DEFINE_UI_PARAMS(max_blur_theta_deg, Max Blur Rotation Deg, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(max_blur_radius, Max Blur Thickness, DCTLUI_SLIDER_FLOAT, 3.0, 0.0, 30.0, 0.01)
DEFINE_UI_PARAMS(curve_falloff, Curve Falloff, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(couple_xy, Couple XY, DCTLUI_CHECK_BOX, 1)

DEFINE_UI_PARAMS(draw_curve, Radius vs Strength Curve, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(draw_rotation_heat_map, Draw Blur Rotation Map, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(draw_radius_heat_map, Draw Blur Thickness Map, DCTLUI_CHECK_BOX, 0)

DEFINE_UI_PARAMS(angle_curve_type, Blur Rotation Falloff, DCTLUI_COMBO_BOX, 0, {CURVE_SIGMOID, CURVE_LINEAR, CURVE_ELLIPSE}, {Sigmoid, Linear, Ellipse})
DEFINE_UI_PARAMS(radius_curve_type, Blur Thickness Falloff, DCTLUI_COMBO_BOX, 0, {RADIUS_CURVE_SIGMOID,RADIUS_CURVE_LINEAR}, {Sigmoid, Linear})

DEFINE_UI_PARAMS(drive_blur_rotation, Drive Blur Rotation With, DCTLUI_COMBO_BOX, 0, {DRIVE_ROT_DCTL, DRIVE_ROT_ALPHA, DRIVE_ROT_CONSTANT}, {DCTL, Alpha, Constant})
DEFINE_UI_PARAMS(drive_blur_thickness, Drive Blur Thickness With, DCTLUI_COMBO_BOX, 0, {DRIVE_THICK_DCTL, DRIVE_THICK_ALPHA, DRIVE_THICK_CONSTANT}, {DCTL, Alpha, Constant})

// clang-format on

#define PI (3.14159265358979323f)

__DEVICE__ float3 sample_color(int2 pos, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    return make_float3(_tex2D(p_TexR, pos.x, pos.y), _tex2D(p_TexG, pos.x, pos.y), _tex2D(p_TexB, pos.x, pos.y));
}

__DEVICE__ inline float maxf(float x, float y) {
    return _fmaxf((float)x, (float)y);
}

__DEVICE__ inline float minf(float x, float y) {
    return _fminf((float)x, (float)y);
}

__DEVICE__ float convert_gamma_to_reals(float g) {
    // Converts -1 to +1 range to an exponent
    // Essentially what Resolve does with its gamma
    // correction.
    float out;
    if (g <= 0) {
        out = 1.0f + (-4.0f * g);
    } else {
        out = 1.0f / (4.0f * g + 1);
    }
    return out;
}

__DEVICE__ float pivot_contrast(float x, float pivot, float contrast) {
    return (x - pivot) * contrast + pivot;
}

__DEVICE__ float powi(float x, int exp) {
    float out = 1.0;
    int abs_exp = exp < 0 ? exp * -1 : exp;
    for (int i = 0; i < abs_exp; ++i) {
        out *= x;
    }
    if (exp < 0) {
        out = 1.0 / out;
    }
    return out;
}

__DEVICE__ float mod(float x, float y) {
    if (x < 0) {
        return y + _fmod(x, y);
    } else {
        return _fmod(x, y);
    }
}

__DEVICE__ float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

__DEVICE__ float mixf(float x, float y, float a) {
    return x * (1.0 - a) + y * a;
}

__DEVICE__ float2 mixf2(float2 x, float2 y, float a) {
    return make_float2(mixf(x.x, y.x, a), mixf(x.y, y.y, a));
}

__DEVICE__ float ellipse_step(float start, float end, float alpha) {
    // Bottom right corner of ellipse given by
    // alpha^2 + ((y - end - start)/end))^2 = 1
    return -_sqrtf(1.0 - alpha * alpha) * end + start + end;
}

__DEVICE__ float smoothstep2(float start, float end, float alpha) {
    // alpha expected to be from 0 to 1.
    // https://www.desmos.com/calculator/pernscu1gx
    alpha = _clampf(alpha, 0.0f, 1.0f);
    float factor;
    if (alpha < 0.5) {
        factor = 0.5 * powi(alpha * 2.0, 3);
    } else {
        factor = 0.5 * (2.0 - powi(2.0 - (alpha * 2.0), 3));
    }
    return mixf(start, end, factor);
}

__DEVICE__ float unnormalized_norm_pdf(float z, float mean, float std) {
    if ((z - mean) < 1e-8) {
        return 1.0;
    }
    if (_fabs(z - mean) > 5.0 * std) {
        return 0.0;
    }
    float var = std * std;
    if (var < 1e-8) {
        return 1.0;
    }
    return _expf(-0.5f * (z - mean) * (z - mean) / var);
}

__DEVICE__ float smoothed_circle_weight(float2 pos_trans, float radius) {
    // pos_trans is in pixels.
    float distance = _hypotf(pos_trans.x, pos_trans.y);
    if (distance < 1e-3) {
        return 1.0;
    }
    float std = radius / 3.5;
    return unnormalized_norm_pdf(distance, 0.0, std);
}

__DEVICE__ float approx_circle_weight(float2 pos_trans, float radius) {
    // pos_trans is in pixels.
    float distance = _hypotf(pos_trans.x, pos_trans.y);

    if (distance > radius + 0.5) {
        return 0.0;
    } else if (distance < radius - 0.5) {
        return 1.0;
    } else {
        return smoothstep2(1.0, 0.0, distance - (radius - 0.5));
    }
}

__DEVICE__ float2 polar_to_cart_pix(float2 rad_theta, float2 dimensions) {
    // rad_theta.x is radius in pixels, distance from center, rad_theta.y is theta, the angle is radians, CCW from 0 (directly right)
    float x = rad_theta.x * _cosf(rad_theta.y) + dimensions.x / 2.0f;
    float y = rad_theta.x * _sinf(rad_theta.y) + dimensions.y / 2.0f;
    return make_float2(x, y);
}

__DEVICE__ float2 cart_pix_to_polar(float2 xy, float2 dimensions) {
    float2 centered = xy - (dimensions / 2.0f);
    float radius = _hypotf(centered.x, centered.y);
    float theta = _atan2f(centered.y, centered.x);
    return make_float2(radius, theta);
}

__DEVICE__ float angle_distance(float theta1, float theta2) {
    // Returns the angle counterclockwise needed to go from theta2 to theta1, but with magnitude that never exceeds PI radians.
    theta1 = mod(theta1, 2.0 * PI);
    theta2 = mod(theta2, 2.0 * PI);
    if (_fabs(theta1 - theta2) <= PI) {
        return theta1 - theta2;
    } else if (theta1 - theta2 > PI) {
        return (theta2 + 2.0 * PI) - theta1;
    } else { // if (theta2 - theta1 > PI) {
        return (theta1 + 2.0 * PI) - theta2;
    }
}

__DEVICE__ float clamp_angle(float theta, float theta_low, float theta_high) {
    theta_low = mod(theta_low, 2.0 * PI);
    theta_high = mod(theta_high, 2.0 * PI);
    theta = mod(theta, 2.0 * PI);
    if (theta_low <= theta_high) {
        if (theta <= theta_high && theta >= theta_low) {
            return theta;
        } else if (_fabs(angle_distance(theta, theta_low)) < _fabs(angle_distance(theta, theta_high))) {
            return theta_low;
        } else {
            return theta_high;
        }
    } else {
        // theta_high <= theta_low -- wrap around.
        if (theta <= theta_high || theta >= theta_low) {
            return theta;
        } else if (_fabs(angle_distance(theta, theta_low)) < _fabs(angle_distance(theta, theta_high))) {
            return theta_low;
        } else {
            return theta_high;
        }
    }
}

// We will consider an arc centered at p_X, p_Y, which we will denote in polar coordinates as (r0, theta0).
// this arc will span from (r0, theta0 - blur_angle) to (r0, theta0 + blur_angle).
// At each point in the arc, we draw a disk of radius `disk_radius`. All pixels within these disks will
// be included the blur kernel/weighted average for point p_X, p_Y.
typedef struct {
        float disk_radius; // radius of each disk along the arc, in pixels.
        float blur_angle;  // half of arc length theta1 - theta0.
        float curr_factor;
} kernel_params_t;

__DEVICE__ kernel_params_t make_kernel_params(float disk_radius, float blur_angle, float curr_factor) {
    kernel_params_t params;
    params.disk_radius = disk_radius;
    params.blur_angle = blur_angle;
    params.curr_factor = curr_factor;
    return params;
}

// Inclusive on bounds.
typedef struct {
        int2 left_bottom; // to be specified in terms of cartesian pixel coordinates
        int2 right_top;
} bounding_box_t;

__DEVICE__ bounding_box_t make_bounding_box(int2 left_bottom, int2 right_top) {
    bounding_box_t box = {};
    box.left_bottom = left_bottom;
    box.right_top = right_top;
    return box;
}

__DEVICE__ bounding_box_t get_bounding_box(float2 xy, float2 dimensions, kernel_params_t params) {
    // Evaluate four corners and midpoint positions and take the outer bounds of them.
    float2 center_polar = cart_pix_to_polar(xy, dimensions);

    // First consider the two endpoints of the arc.

    float2 point1 = polar_to_cart_pix(make_float2(center_polar.x, center_polar.y + params.blur_angle), dimensions);
    float2 point2 = polar_to_cart_pix(make_float2(center_polar.x, center_polar.y - params.blur_angle), dimensions);

    // Note that if the arc crosses a multiple of PI/2 (90 degrees), then that point will have the maximal x or y coordinate. Thus, we need
    // to sample this point too, if it exists. Otherwise, default to xy, which is guaranteed to be between point1 and point2.
    float2 point3 = xy;
    for (int i = 0; i < 4; ++i) {
        float query_angle = PI / 2.0 * i;
        if (_fabs(angle_distance(center_polar.y, query_angle)) <= params.blur_angle) {
            point3 = polar_to_cart_pix(make_float2(center_polar.x, query_angle), dimensions);
        }
    }

    float2 maximum_values = make_float2(maxf(point1.x, maxf(point2.x, point3.x)), maxf(point1.y, maxf(point2.y, point3.y))) + params.disk_radius + 1.0f;
    float2 minimum_values = make_float2(minf(point1.x, minf(point2.x, point3.x)), minf(point1.y, minf(point2.y, point3.y))) - params.disk_radius - 1.0f;
    return make_bounding_box(make_int2((int)_floorf(minimum_values.x), (int)_floorf(minimum_values.y)),
                             make_int2((int)_ceilf(maximum_values.x), (int)_ceilf(maximum_values.y)));
}

__DEVICE__ float compute_curve_factor(float curr_factor, float curve_falloff, int curve_type) {
    float kernel_blur_factor = curr_factor;
    if (curve_type == CURVE_SIGMOID) {
        curr_factor = _clampf(pivot_contrast(curr_factor, 0.5f, 1.0f + curve_falloff), 0.0f, 1.0f);
        kernel_blur_factor = smoothstep2(0.0, 1.0, curr_factor);
    } else if (curve_type == CURVE_ELLIPSE) {
        curr_factor = powf(curr_factor, convert_gamma_to_reals(-1 * curve_falloff));
        kernel_blur_factor = ellipse_step(0.0, 1.0, curr_factor);
    } else if (curve_type == CURVE_LINEAR) {
        curr_factor = _clampf(pivot_contrast(curr_factor, 0.5f, 1.0f + curve_falloff), 0.0f, 1.0f);
        kernel_blur_factor = curr_factor;
    }
    return kernel_blur_factor;
}

__DEVICE__ kernel_params_t compute_kernel_params_with_alpha(float alpha, float2 dimensions, float max_blur_radius, float max_blur_theta_rad) {
    float normalized_max_disk_radius = max_blur_radius * dimensions.x / 2048.0;
    kernel_params_t params = make_kernel_params(normalized_max_disk_radius * alpha, max_blur_theta_rad * alpha, alpha);
    return params;
}

__DEVICE__ kernel_params_t compute_kernel_params(float2 xy,
                                                 float2 dimensions,
                                                 float2 protected_radius,
                                                 float max_blur_theta_rad,
                                                 float max_blur_radius,
                                                 int angle_curve_type,
                                                 int radius_curve_type,
                                                 float curve_falloff) {
    // xy is in units of pixels.

    // normalized_pos is normalized so that left edge is x=-1, right edge is x=1, and it's square coordinates.
    float2 normalized_pos = make_float2(((xy.x / (dimensions.x - 1.0)) - 0.5) * 2.0,
                                        ((xy.y / (dimensions.y - 1.0)) - 0.5) * 2.0 // dimensions.y / dimensions.x
    );

    float normalized_max_disk_radius = max_blur_radius * dimensions.x / 2048.0; // max radius in pixels of blur.
    float curr_radius = _hypotf(normalized_pos.x, normalized_pos.y);

    float protected_radius_curr_x =
        _sqrtf(1.0 / (1.0 / powi(protected_radius.x, 2) + powi(normalized_pos.y / (normalized_pos.x * protected_radius.y), 2)));
    float protected_radius_curr_y = protected_radius_curr_x * normalized_pos.y / normalized_pos.x;
    float protected_radius_threshold = _hypotf(protected_radius_curr_x, protected_radius_curr_y);

    float2 max_blur_ellipse;
    if (protected_radius.x == 0.0 && protected_radius.y == 0.0) {
        float2 temp_protected_radius = make_float2(1.0, 1.0);
        max_blur_ellipse.y = (_hypotf(temp_protected_radius.x, temp_protected_radius.y) / temp_protected_radius.x);
        max_blur_ellipse.x = temp_protected_radius.x / temp_protected_radius.y * max_blur_ellipse.y;
    } else if (protected_radius.x != 0.0) {
        max_blur_ellipse.y = (_hypotf(protected_radius.x, protected_radius.y) / protected_radius.x);
        max_blur_ellipse.x = protected_radius.x / protected_radius.y * max_blur_ellipse.y;
    } else {
        max_blur_ellipse.x = (_hypotf(protected_radius.y, protected_radius.x) / protected_radius.y);
        max_blur_ellipse.y = protected_radius.y / protected_radius.x * max_blur_ellipse.x;
    }

    float max_radius_curr_x = _sqrtf(1.0 / (1.0 / powi(max_blur_ellipse.x, 2) + powi(normalized_pos.y / (normalized_pos.x * max_blur_ellipse.y), 2)));
    float max_radius_curr_y = max_radius_curr_x * normalized_pos.y / normalized_pos.x;
    float max_radius_threshold = _hypotf(max_radius_curr_x, max_radius_curr_y);
    max_radius_threshold = maxf(protected_radius_threshold, max_radius_threshold);

    float curr_factor = _clampf((curr_radius - protected_radius_threshold) / (max_radius_threshold - protected_radius_threshold), 0.0f, 1.0f);

    float theta_blur_factor = compute_curve_factor(curr_factor, curve_falloff, angle_curve_type);
    float disk_radius_blur_factor = compute_curve_factor(curr_factor, curve_falloff, radius_curve_type);
    // disk_radius_blur_factor = _clampf(disk_radius_blur_factor, 0.0, 0.5);
    return make_kernel_params(disk_radius_blur_factor * normalized_max_disk_radius, theta_blur_factor * max_blur_theta_rad, curr_factor);
}

__DEVICE__ float blur_kernel_weight(float2 pos_trans, float2 window_center, float2 dimensions, kernel_params_t params) {
    // window_center and dimensions are in pixels.
    // pos_trans + window_center is the currently sampled pixel coordinates.
    float2 sampled_pos = pos_trans + window_center;
    float2 sampled_pos_polar = cart_pix_to_polar(sampled_pos, dimensions);
    float2 window_center_polar = cart_pix_to_polar(window_center, dimensions);

    // Get polar position of current disk.
    float2 curr_disk_center_polar = make_float2(
        window_center_polar.x, clamp_angle(sampled_pos_polar.y, window_center_polar.y - params.blur_angle, window_center_polar.y + params.blur_angle));
    // Assume disk of radius = `disk_radius` is centered at this position and assign that weight.
    float2 curr_disk_center_cart = polar_to_cart_pix(curr_disk_center_polar, dimensions);
    float angle_weight = unnormalized_norm_pdf(_fabs(angle_distance(sampled_pos_polar.y, window_center_polar.y)), 0.0, params.blur_angle / 3.5);
    // float thickness_weight = approx_circle_weight(sampled_pos - curr_disk_center_cart, params.disk_radius);
    float thickness_weight = smoothed_circle_weight(sampled_pos - curr_disk_center_cart, params.disk_radius);

    // return thickness_weight;

    // angle_weight = 1.0;
    // thickness_weight = unnormalized_norm_pdf(_fabs(sampled_pos_polar.x - window_center_polar.x), 0.0, params.disk_radius / 3.5);

    return thickness_weight * angle_weight;
}

__DEVICE__ float3 blur(int p_Width, int p_Height, int2 center_pos, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB, kernel_params_t params) {
    float3 total_color = make_float3(0.0, 0.0, 0.0);
    float weight = 0.0;
    float3 output_color = make_float3(0.0, 0.0, 0.0);
    if (params.disk_radius == 0.0 || params.blur_angle == 0.0) {
        return sample_color(center_pos, p_TexR, p_TexG, p_TexB);
    }
    int num_pixels = 0;

    float2 center_pos_f = make_float2(center_pos.x, center_pos.y);
    float2 dimensions = make_float2(p_Width, p_Height);
    bounding_box_t bounds = get_bounding_box(center_pos_f, dimensions, params);
    float3 curr_color;
    for (int y = bounds.left_bottom.y; y <= bounds.right_top.y; y++) {
        for (int x = bounds.left_bottom.x; x <= bounds.right_top.x; x++) {

            float2 pos_trans = make_float2(x, y) - center_pos_f;
            float w = blur_kernel_weight(pos_trans, center_pos_f, dimensions, params);
            if (w == 0.0) {
                continue;
            }

            int2 runner_pos = make_int2(x, y);
            curr_color = sample_color(runner_pos, p_TexR, p_TexG, p_TexB);

            total_color += curr_color * w;
            weight += w;
            num_pixels++;
        }
    }
    return total_color / weight;
}

// Aggregates together all the arguments and returns an appropriate blur kernel,
// whether it's alpha-driven, dctl-driven, or constant for each argument.
__DEVICE__ kernel_params_t get_params_from_selection(int drive_blur_rotation,
                                                     int drive_blur_thickness,
                                                     __TEXTURE__ p_TexA,
                                                     float2 curr_pos,
                                                     float2 dimensions,
                                                     float max_blur_radius,
                                                     float max_blur_theta_rad,
                                                     float2 protected_radius,
                                                     int angle_curve_type,
                                                     int radius_curve_type,
                                                     float curve_falloff) {
    kernel_params_t params_alpha;
    kernel_params_t params_dctl;
    kernel_params_t params_constant;

    if (drive_blur_rotation == DRIVE_ROT_ALPHA || drive_blur_thickness == DRIVE_THICK_ALPHA) {
        float curr_alpha = _tex2D(p_TexA, curr_pos.x, curr_pos.y);
        params_alpha = compute_kernel_params_with_alpha(curr_alpha, dimensions, max_blur_radius, max_blur_theta_rad);
    }

    if (drive_blur_rotation == DRIVE_ROT_DCTL || drive_blur_thickness == DRIVE_THICK_DCTL) {
        params_dctl = compute_kernel_params(
            curr_pos, dimensions, protected_radius, max_blur_theta_rad, max_blur_radius, angle_curve_type, radius_curve_type, curve_falloff);
    }

    if (drive_blur_rotation == DRIVE_ROT_CONSTANT || drive_blur_thickness == DRIVE_THICK_CONSTANT) {
        params_constant = compute_kernel_params_with_alpha(1.0, dimensions, max_blur_radius, max_blur_theta_rad);
    }
    kernel_params_t params;
    float blur_angle;
    float disk_radius;
    float curr_factor;
    if (drive_blur_rotation == DRIVE_ROT_ALPHA) {
        blur_angle = params_alpha.blur_angle;
        curr_factor = params_alpha.curr_factor;
    } else if (drive_blur_rotation == DRIVE_ROT_DCTL) {
        blur_angle = params_dctl.blur_angle;
        curr_factor = params_dctl.curr_factor;
    } else {
        blur_angle = params_constant.blur_angle;
        curr_factor = params_constant.curr_factor;
    }

    if (drive_blur_thickness == DRIVE_THICK_ALPHA) {
        disk_radius = params_alpha.disk_radius;
    } else if (drive_blur_thickness == DRIVE_THICK_DCTL) {
        disk_radius = params_dctl.disk_radius;
    } else {
        disk_radius = params_constant.disk_radius;
    }
    params = make_kernel_params(disk_radius, blur_angle, curr_factor);
    return params;
}

__DEVICE__ float4 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB, __TEXTURE__ p_TexA) {
    int2 curr_pos = make_int2(p_X, p_Y);
    float3 output_color;
    if (couple_xy) {
        protected_radius_y = protected_radius_x;
    }
    kernel_params_t params = get_params_from_selection(drive_blur_rotation,
                                                       drive_blur_thickness,
                                                       p_TexA,
                                                       make_float2(p_X, p_Y),
                                                       make_float2(p_Width, p_Height),
                                                       max_blur_radius,
                                                       max_blur_theta_deg * PI / 180.0,
                                                       make_float2(protected_radius_x, protected_radius_y),
                                                       angle_curve_type,
                                                       radius_curve_type,
                                                       curve_falloff);

    output_color = blur(p_Width, p_Height, curr_pos, p_TexR, p_TexG, p_TexB, params);

    if (draw_rotation_heat_map) {
        output_color = make_float3(params.blur_angle, params.blur_angle, params.blur_angle);
    }
    if (draw_radius_heat_map) {
        output_color = make_float3(params.disk_radius, params.disk_radius, params.disk_radius);
    }

    if (draw_curve) {
        float x = (float)p_X / (float)(p_Width - 1);
        float y = (float)p_Y / (float)(p_Height - 1);
        x = (x * 2.0) - 1.0; // normalize so that middle is zero
        y = 1 - y;
        float2 chart_pos = mixf2(make_float2(0.0, 0.0), make_float2(p_Width, p_Height) - 1.0f, p_X / (p_Width - 1.0));
        params = get_params_from_selection(drive_blur_rotation,
                                           drive_blur_thickness,
                                           p_TexA,
                                           chart_pos,
                                           make_float2(p_Width, p_Height),
                                           max_blur_radius,
                                           max_blur_theta_deg * PI / 180.0,
                                           make_float2(protected_radius_x, protected_radius_y),
                                           angle_curve_type,
                                           radius_curve_type,
                                           curve_falloff);
        if (_fabs(y * 10.0 * PI / 180.0 - params.blur_angle) < 0.0005) {
            output_color = make_float3(1.0, 1.0, 1.0);
        }
        if (_fabs(y * 20 - params.disk_radius) < 0.01) {
            output_color = make_float3(0.25, 0.25, 0.25);
        }
        if (_fabs(x) < 0.002 && mod(y, 0.15) < 0.1) {
            output_color = make_float3(0.5, 0.5, 0.5);
        }
    }
    float4 output_rgba = make_float4(output_color.x, output_color.y, output_color.z, 1.0f);
    return output_rgba;
}